library(tidyverse)
library(caret)
library(AppliedPredictiveModeling)
library(e1071)

data("concrete")
str(concrete)
str(mixtures)
skwe <- sapply(concrete, skewness)
skwe
##Dados normalmente distribuidos: Water and CoarseAggregate

##Processamento Paralelo
##Aumentar a Velocidade
library(doParallel)
cl <- makePSOCKcluster(5)
registerDoParallel(cl)

##Plots
featurePlot(x = concrete[,-9],
            y = concrete$CompressiveStrength,
            type = c('g','p', 'smooth'))


featurePlot(x = mixtures[,-9],
            y = mixtures$CompressiveStrength,
            type = c('g','p', 'smooth'))

##Modelos
set.seed(975)
forTraining <- createDataPartition(mixtures$CompressiveStrength,
                                     p = 0.75)[[1]]

trainingSet <- mixtures[ forTraining,]
testSet <- mixtures[-forTraining,]

##Formula para modelos lineares
modFormula <- paste("CompressiveStrength ~ (.)^2 + I(Cement^2) + ",
                    "I(BlastFurnaceSlag^2) + I(FlyAsh^2) + I(Water^2) +",
                    " I(Superplasticizer^2) + I(CoarseAggregate^2) + ",
                    "I(FineAggregate^2) + I(Age^2)")
modFormula <- as.formula(modFormula)


##Controle
controlObject <- trainControl(method = "repeatedcv",
                              repeats = 5,
                              number = 10)

##Modelo Linear
set.seed(669)
linearReg <- train(modFormula,
                     data = trainingSet,
                     method = "lm",
                     trControl = controlObject)
linearReg
importancia(linearReg)
correlacao(linearReg)
##Importancia da Variável
importancia <- function(x){
Import <- varImp(x)
plot(Import, top = 10)
}

##RMSE e Correlacao
correlacao <- function(x){
predito <- predict(x, testSet)
R <- RMSE(predito, testSet$CompressiveStrength)
Cor <- cor(predito, testSet$CompressiveStrength)
print(c('RMSE: ' =  R, 'R2: '=  Cor * Cor))
}

##Pls Model
set.seed(669)
plsModel <- train(modFormula, data = trainingSet,
                    method = "pls",
                    preProc = c("center", "scale"),
                    tuneLength = 15,
                    trControl = controlObject)

importancia(plsModel)
correlacao(plsModel)


##SVM radial
set.seed(669)
svmRModel <- train(CompressiveStrength ~ ., data = trainingSet,
                     method = "svmRadial",
                     tuneLength = 15,
                     preProc = c("center", "scale"),
                     trControl = controlObject)

importancia(svmRModel)
correlacao(svmRModel)

##NNet
nnetGrid <- expand.grid(decay = c(0.001, .01, .1),
                        size = seq(1, 27, by = 2),
                        bag = FALSE)

set.seed(669)
nnetModel <- train(CompressiveStrength ~ .,
                     data = trainingSet,
                     method = "avNNet",
                     tuneGrid = nnetGrid,
                     preProc = c("center", "scale"),
                     linout = TRUE,
                     trace = FALSE,
                     maxit = 1000,
                     trControl = controlObject)

##Rpart
set.seed(669)
rpartModel <- train(CompressiveStrength ~ .,
                      data = trainingSet,
                      method = "rpart",
                      tuneLength = 30,
                      trControl = controlObject)

rpart.plot::rpart.plot(rpartModel$finalModel)
##Ctree
set.seed(669)
ctreeModel <- train(CompressiveStrength ~ .,
                      data = trainingSet,
                      method = "ctree",
                      tuneLength = 10,
                      trControl = controlObject)

##TreeBag
set.seed(669)
treebagModel <- train(CompressiveStrength ~ .,
                        data = trainingSet,
                        method = "treebag",
                        trControl = controlObject)


##RandomForest
rfModel <- train(CompressiveStrength ~ .,
                 data = trainingSet,
                 method = "rf",
                 tuneLength = 10,
                 ntrees = 1000,
                 importance = TRUE,
                 trControl = controlObject)

plot(rfModel)
importancia(rfModel)
correlacao(rfModel)
##Grafico de resíduo

predito <- predict(rfModel, testSet)

predito <- tibble(predito) %>%
         mutate(
           residuals = predito - testSet$CompressiveStrength)
ggplot(dat = predito, aes(x = predito, y = residuals))+
  geom_point()+
  geom_smooth()

ggplot(dat = predito, aes(x = predito, y = testSet$CompressiveStrength))+
  geom_point()+
  geom_smooth()


##Gbm
gbmGrid <- expand.grid(interaction.depth = seq(1, 7, by = 2),
                       n.trees = seq(100, 1000, by = 50),
                       shrinkage = c(0.01, 0.1))

set.seed(669)
gbmModel <- train(CompressiveStrength ~ .,
                    data = trainingSet,
                    method = "gbm",
                    tuneGrid = gbmGrid,
                    verbose = FALSE,
                    trControl = controlObject)

##Cubist
cubistGrid <- expand.grid(committees = c(1, 5, 10, 50, 75, 100),
                          neighbors = c(0, 1, 3, 5, 7, 9))

set.seed(669)
cbModel <- train(CompressiveStrength ~ .,
                   data = trainingSet,
                   method = "cubist",
                   tuneGrid = cubistGrid,
                   trControl = controlObject)

plot(cbModel)
importancia(cbModel)
correlacao(cbModel)

##Salvar o modelo
saveRDS(cbModel, file = 'cbModel.rds')

##Ler o modelo
cbModel <- readRDS('cbModel.rds')

allResamples <- resamples(list("Linear Reg" = linearReg,
                               "PLS" = plsModel,
                               'SVM' = svmRModel,
                               'CART' = rpartModel,
                               "Cond Inf Tree" = ctreeModel,
                               "Bagged Tree" = treebagModel,
                               "Random Forest" = rfModel,
                               "Cubist" = cbModel))

summary(allResamples)
## Plot the RMSE values
parallelplot(allResamples)
##Using R-squared:
parallelplot(allResamples, metric = "Rsquared")
